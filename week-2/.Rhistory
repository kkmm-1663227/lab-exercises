my_num <- 6
initials <- "?. ?."
my_vector <- c(my_num, initials)
vector_sum <- sum(my_vector)
install.packages("stringr")
my_line <- "Hey, hey, this is the library"
print(str_length(my_line))
said_the_famous <- paste(my_line, " - ", initial)
typeof(c("dogs", "cats", "birds")) # "character"
library(styler)
library(lintr)
x <- 3
y <- x +3
y > 100
setwd(~/Desktop/)
> setwd(Desktop)
library(styler)
library(lintr)
x <- 3
y <- x +3
y > 100
style_file(Trash.R)
compare_length <- function(v1, v2) {
diff <- abs(length(v1) - length(v2))
diff_string <- paste('The difference in lengths is', diff)
return(diff_string)
compare_length(c(1,2,3), 2:200)
## Part 1: Debugging
my_num <- 6
initials <- "?. ?."
my_vector <- c(my_num, initials)
# run ?sum to get more info
vector_sum <- sum(my_vector)
# Describe why this doesn't work:
# Because we can only use "sum()" for numbers and not letters
install.packages("stringr")
my_line <- "Hey, hey, this is the library"
print(str_length(my_line))
# Describe why this doesn't work:
# We didn't use library() on the stringr package
said_the_famous <- paste(my_line, " - ", initial)
# Describe why this doesn't work:
# We haven't stored "initial" as a variable in the environmentt
## Part 2 - Vector and function practice
# Make a vector and use typeof to check what type R considers it to be
typeof(c("dogs", "cats", "birds")) # "character"
typeof(c(1, 4, 6)) # "double"
typeof(c(1, "dogs")) # "character"
# Write a function `compare_length` that takes in 2 vectors, and returns the sentence:
# "The difference in lengths is N"
compare_length <- function(v1, v2) {
diff <- abs(length(v1) - length(v2))
diff_string <- paste('The difference in lengths is', diff)
return(diff_string)
}
# Pass two vectors of different length to your `compare_length` function
compare_length(c(1,2,3), 2:200)
# Write a function `describe_difference` that will return one of the following statements:
# "Your first vector is longer by N elements"
# "Your second vector is longer by N elements"
# Pass two vectors to your `describe_difference` function
# Write a function `combine_vectors` that takes in 3 vectors and combines them into one
# Send 3 vectors to your function to test it.
# Write a function `caps_time` that takes in a vector of names of courses you're taking, ex "Informatics 201" and removes all capital letters
describe_difference <- function(a, b) {
diff <- length(a) - length(b)
if(diff > 0) {
sentence <- paste('Your first vector is longer by', diff, 'elements')
} else {
sentence <- paste('Your second vector is longer by', diff, 'elements')
}
return(sentence)
}
describe_difference <- function(a, b) {
diff <- length(a) - length(b)
if(diff > 0) {
sentence <- paste('Your first vector is longer by', diff, 'elements')
} else {
sentence <- paste('Your second vector is longer by', diff, 'elements')
}
return(sentence){}
}
describe_difference(2:7, 30:90)
describe_difference(1:15, 9:17)
combine_vectors <- function(v1,v2,v3) {
return(c(v1,v2,v3))
}
combine_vectors(c("Cats ", "and ", "of" ), c("fur"), c("group", "away"))
caps_time <- function(couses) {
return(gsub("[A-Z]", "", courses))
}
caps_time(c("Economics 382", "American Indian Studies 340", "Informatics 201"))
combine_vectors <- function(v1,v2,v3) {
return(c(v1,v2,v3))
}
# Send 3 vectors to your function to test it.
combine_vectors(c("Cats ", "and ", "of" ), c("fur"), c("group", "away"))
# Write a function `caps_time` that takes in a vector of names of courses you're taking, ex "Informatics 201" and removes all capital letters
caps_time <- function(couses) {
return(gsub("[A-Z]", "", courses))
}
caps_time(c("Economics 382", "American Indian Studies 340", "Informatics 201"))
caps_time <- function(couses) {
return(gsub("[A->Z]", "", courses))
}
caps_time(c("Economics 382", "American Indian Studies 340", "Informatics 201"))
caps_time <- function(couses) {
return(gsub("[A-Z]", "", courses))
}
caps_time(c("Economics 382", "American Indian Studies 340", "Informatics 201"))
names <- c("Kevin", "Angela", "Mike"))
print(names)
names <- c("Kevin", "Angela", "Mike"))
print(names)
names <- c("Joel", "Mike", "Dave")
names <- c("Kevin", "Angela", "Mike")
print(names)
n <- 10:49
length(n)
print(n+1)
m <- seq(10, 1)
print(m)
n_less_m <- n - m
print(n_less_m)
# Use the `seq()` function to produce a range of numbers from -5 to 10 in `0.1`
# increments. Store it in a variable `x_range`
x_range <- seq(-5, 10, 0.1)
print(x_range)
# Create a vector `sin_wave` by calling the `sin()` function on each element
# in `x_range`.
sin_wave <- sin(x_range)
# Create a vector `cos_wave` by calling the `cos()` function on each element
# in `x_range`.
cos_wave <- cos(x_range)
wave <- (sin_wave * cos_wave) + sin_wave
# Use the `plot()` function to plot your `wave`!
plot(wave)
# Create a vector `wave` by multiplying `sin_wave` and `cos_wave` together, then
# adding `sin_wave` to the product
wave <- sin_wave * cos_wave + sin_wave
plot(wave)
wave <- (sin_wave * cos_wave) + sin_wave
plot(wave)
plot(sin_wave, cos_wave)
plot(wave)
course <- list(
number= "201",
num_students=150,
assignments=list(
at = "News",
a2-"r basics"
)
)
course <- list(
number= "201",
num_students=150,
assignments=list(
at = "News",
a2="r basics"
)
)
course <- list(
number= "201",
num_students=150,
assignments=list(
a1 = "News",
a2 = "r basics"
)
)
couse$num_students
course$num_students
course <- list(
number= "201",
num_students=150,
assignments=list(
a1 = "News",
a2 = "r basics"
)
)
course$num_students
people <-list(p1=100, p2=200)lapply(people, sqrt)
people <-list(p1=100, p2=200)lapply(people, sqrt)
my_breakfast <- c("oatmeal", "coffee", "gum")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("lettuce", "chicken", "orange")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(breakfast = my_breakfast, lunch = my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals$dinner <- c("nuggets", "fries")
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- meals$dinner
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[[5]] <- meals[["lunch"]]
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- meals[1:2]
print(early_meals)
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
items <- lappy(meals, length)
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
items <- lapply(meals, length)
add_pizza <- function(meal) {
meal <- c(meal, "pizza")
meal # In order to return to the new vector
}
# Create a vector `better_meals` that is all your meals, but with pizza!
better_meals <- lapply(meals, add_pizza)
print(better_meals)
meals$breakfast
# Exercise 1: creating and accessing lists
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("oatmeal", "coffee")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("lettuce", "chicken", "orange")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(breakfast = my_breakfast, lunch = my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals$dinner <- c("nuggets", "fries")
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- meals$dinner
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[[5]] <- meals[["lunch"]]
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- meals[1:2]
print(early_meals)
### Challenge ###
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
items_per_meal <- lapply(meals, length)
# Write a function `add_pizza` that adds pizza to a given meal vector, and
# returns the pizza-fied vector
add_pizza <- function(meal) {
meal <- c(meal, "pizza")
meal # In order to return to the new vector
}
# Create a vector `better_meals` that is all your meals, but with pizza!
better_meals <- lapply(meals, add_pizza)
print(better_meals)
View(items)
# Exercise 1: creating and accessing lists
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("oatmeal", "coffee")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("lettuce", "chicken", "orange")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(breakfast = my_breakfast, lunch = my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals$dinner <- c("nuggets", "fries")
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- meals$dinner
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[[5]] <- meals[["lunch"]]
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- meals[1:2]
print(early_meals)
### Challenge ###
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
items_per_meal <- lapply(meals, length)
# Write a function `add_pizza` that adds pizza to a given meal vector, and
# returns the pizza-fied vector
add_pizza <- function(meal) {
meal <- c(meal, "pizza")
meal # In order to return to the new vector
}
# Create a vector `better_meals` that is all your meals, but with pizza!
better_meals <- lapply(meals, add_pizza)
print(better_meals)
better_meals
# Exercise 1: creating and accessing lists
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("oatmeal", "coffee")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("lettuce", "chicken", "orange")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(breakfast = my_breakfast, lunch = my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals$dinner <- c("nuggets", "fries")
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- meals$dinner
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[[5]] <- meals[["lunch"]]
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- meals[1:2]
print(early_meals)
### Challenge ###
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
items_per_meal <- lapply(meals, length)
# Write a function `add_pizza` that adds pizza to a given meal vector, and
# returns the pizza-fied vector
add_pizza <- function(food) {
c(food, "pizza")
}
# Create a vector `better_meals` that is all your meals, but with pizza!
better_meals <- lapply(meals, add_pizza)
print(better_meals)
# Exercise 1: creating and accessing lists
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("oatmeal", "coffee")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("lettuce", "chicken", "orange")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(breakfast = my_breakfast, lunch = my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals$dinner <- c("nuggets", "fries")
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- meals$dinner
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[[5]] <- meals[["lunch"]]
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- meals[1:2]
print(early_meals)
### Challenge ###
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
items_per_meal <- lapply(meals, length)
# Write a function `add_pizza` that adds pizza to a given meal vector, and
# returns the pizza-fied vector
add_pizza <- function(food) {
c(food, "pizza")
}
add_anything <- function(food, new_food) {
c(food, new_food)
}
# Create a vector `better_meals` that is all your meals, but with pizza!
better_meals <- lapply(meals, add_pizza)
custom_meals <- lapply(meals, add_anything, "soup")
custom_meals
